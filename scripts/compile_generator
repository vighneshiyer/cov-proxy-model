#!/usr/bin/env python

import argparse
import sys
from pathlib import Path
from typing import List, Tuple, Dict
import os
import shutil

from utils import run_cmd

def main():
    parser = argparse.ArgumentParser(prog="compile_generator", description="Compile riscv-dv using VCS")
    parser.add_argument('--working-dir', help="Scratch directory used for VCS compilation", required=True)
    parser.add_argument('--out', help="Name of the compiled riscv-dv binary", required=True)
    args = parser.parse_args()

    riscv_dv_path = Path.cwd() / "riscv-dv"
    working_dir = Path(args.working_dir).resolve()
    working_dir.mkdir(exist_ok=True)
    bin_output = working_dir / args.out
    cmd, envvars = vcs_build_cmd(riscv_dv_path, working_dir, bin_output)
    for key, value in envvars.items():
        print(key, value)
        os.environ[key] = value
    print(cmd)
    run_cmd(cmd)


# Returns the command as a list of pieces and a dictionary indicating the environment variables to set
def vcs_build_cmd(riscv_dv_path: Path, working_dir: Path, out: Path, cov: bool = False) -> Tuple[List[str], Dict[str, str]]:
    assert cov is False  # haven't handled generator coverage collection yet
    vcs_opts = [
        '-full64',
        '-sverilog',
        '-ntb_opts', 'uvm-1.2',
        '-lca',
        '+define+UVM_REGEX_NO_DPI',
        '-timescale=1ns/10ps',
        f"+incdir+{riscv_dv_path}/target/rv64gc",
        f"+incdir+{riscv_dv_path}/user_extension",
        "-f", f"{riscv_dv_path}/files.f",
        "-l", f"{str(working_dir)}/compile.log",
        "-LDFLAGS", '-Wl,--no-as-needed',
        "-CFLAGS", '--std=c99 -fno-extended-identifiers',
        f"-Mdir={str(working_dir)}/vcs_simv.csrc",
        "-o", f"{str(out)}"
    ]
    vcs_path = shutil.which('vcs')
    assert vcs_path is not None
    final_cmd = [vcs_path] + vcs_opts
    return final_cmd, {'RISCV_DV_ROOT': str(riscv_dv_path)}


if __name__ == "__main__":
    main()
